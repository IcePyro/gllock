// http://www.shadertoy.com/view/MtfXRN
#version 330 core

// ---- gllock required fields -----------------------------------------------------------------------------------------
#define RATE 1.0

uniform float time;
uniform float end;
uniform sampler2D imageData;
uniform vec2 screenSize;
// ---------------------------------------------------------------------------------------------------------------------


#define MIN_SIZE 0.0f
#define MAX_SIZE 1.0f

int arrSize = 95;

vec2 p[95] = vec2[95] (vec2(0.7019639027282513, 0.5731801902775219), vec2(0.2948519521488179, 0.9329419247450679), vec2(0.5802283384720809, 0.03391043229596635), vec2(0.2606892966607359, 0.037097744928671905), vec2(0.710486132296122, 0.9557226509385742), vec2(0.4449564258368853, 0.3329153564765125), vec2(0.09576672567206268, 0.40787109012617107), vec2(0.6211386479713461, 0.3663646444717201), vec2(0.7751879023548143, 0.32556470654688485), vec2(0.10839891368309917, 0.31496421510047745), vec2(0.12999804773571833, 0.6760806603609153), vec2(0.14525189226261004, 0.5311440137298363), vec2(0.6685283506843881, 0.19226581664907738), vec2(0.8519342696042421, 0.5790894532965835), vec2(0.46664252039661525, 0.8424325285251002), vec2(0.6154381687508724, 0.6971214668699436), vec2(0.8638369373457576, 0.8695849561951134), vec2(0.6652245724150085, 0.47927422921904106), vec2(0.49207126209720564, 0.52394672944977), vec2(0.8207691756052377, 0.9950031335517889), vec2(0.9759092659484899, 0.862183314452946), vec2(0.3114481629093123, 0.18831289436439924), vec2(0.3999432085526413, 0.06710352989806145), vec2(0.2169450726340435, 0.6469271379492795), vec2(0.20799848241870234, 0.9879745645684403), vec2(0.19766524330823676, 0.8288113522788186), vec2(0.7715063354457818, 0.09800702338545231), vec2(0.9401218929510681, 0.9480151135791797), vec2(0.1487536749550381, 0.07996919911604616), vec2(0.44293935083470304, 0.9457054103366881), vec2(0.5485630594225187, 0.9593160270156994), vec2(0.9419874388691428, 0.46676416713618063), vec2(0.9692066971303137, 0.6024590923802889), vec2(0.6607117114107465, 0.8601115473835103), vec2(0.5723394134950577, 0.4551670733208414), vec2(0.5937403218715229, 0.2676661511564886), vec2(0.22905462035435076, 0.3508618904902461), vec2(0.5883799397049541, 0.13034340018479817), vec2(0.3447140338552983, 0.7354458924123018), vec2(0.9686189423781622, 0.2856467430648144), vec2(0.017755730590576335, 0.05394534424926456), vec2(0.003684287917244067, 0.5347487471499183), vec2(0.8727205443319004, 0.037469326673184034), vec2(0.44564622387558506, 0.6739924406219735), vec2(0.0708684029276948, 0.17195494473648165), vec2(0.29450608867292094, 0.5574089955127381), vec2(0.09140015676909996, 0.89274326519588), vec2(0.19373138882098728, 0.18249537780563374), vec2(0.8092653651129106, 0.6893432932227627), vec2(0.0857044416775824, 0.7704299744793007), vec2(0.9570323777214499, 0.11028418640521087), vec2(0.33399086871590455, 0.37927828203818126), vec2(0.8531093903223793, 0.16742195613111), vec2(0.748698262050832, 0.43464466743438546), vec2(0.9157336292815905, 0.3795900088391744), vec2(0.4962227535553172, 0.20048411008848377), vec2(0.09309906030959525, 0.0017607437318999386), vec2(0.009943020462658825, 0.6459873609983892), vec2(0.5237183910203811, 0.7300283668902993), vec2(0.0023387454105473493, 0.8446758871519938), vec2(0.5695550071972217, 0.597920307730265), vec2(0.005253362210724477, 0.29356261112071325), vec2(0.5589013098339353, 0.8668037417425823), vec2(0.7508995424088336, 0.8449049661947654), vec2(0.9501008019217327, 0.7419657176135724), vec2(0.3878373818669465, 0.5069392034652174), vec2(0.6876644824998096, 0.05506176132413243), vec2(0.2491797239688882, 0.46125398360467407), vec2(0.05524576843022455, 0.988201201653916), vec2(0.37426925175226633, 0.8474987247129582), vec2(0.3883435417915, 0.24117516072681056), vec2(0.9984759180396915, 0.011112126608546324), vec2(0.5310087624994029, 0.3715264872518037), vec2(0.47447239983537826, 0.015171533473724352), vec2(0.781848738928044, 0.00016903597861517294), vec2(0.34558703223119447, 0.6354484093519257), vec2(0.26980643907069757, 0.2680279385030683), vec2(0.2525496868067999, 0.738442059378344), vec2(0.8495886149395161, 0.46670181143323053), vec2(0.368455432258761, 0.9972610834933873), vec2(0.7155535280986053, 0.7103435574936856), vec2(0.5007823269637715, 0.10557447931499053), vec2(0.8523415558192405, 0.25938834981949865), vec2(0.0019306870976487644, 0.4175669701779511), vec2(0.767160114198417, 0.22411962882594505), vec2(0.7750847479741634, 0.5211407768516653), vec2(0.855083514043817, 0.7770972338075193), vec2(0.41733517341632576, 0.4193187962106588), vec2(0.9998909826622683, 0.19874584580651644), vec2(0.6928216194812453, 0.2803661353742517), vec2(0.8954320009648756, 0.6608668287584878), vec2(0.6300114497387438, 0.9974765643820839), vec2(0.41896282611616675, 0.1551000233657589), vec2(0.0017231847184540072, 0.7363940645481395), vec2(0.6081253523827505, 0.787107811561647));

int closest(float x, float y, int maxI){
    int m = 0;
    float md = distance(vec2(x,y), p[0]);
    for(int i = 1; i < min(maxI, arrSize); i++){
        float dist = distance(vec2(x,y), p[i]);
        
        if(dist < md){
            md = dist;
            m = i;
        }
    }
    return m;
}

mat2 rotateFromIndex(int i){
     return mat2(cos(float(i)),-sin(float(i)),
                sin(float(i)),cos(float(i)));
}

vec2 getNewAbsoluteCoordinate(vec2 rawPos, int i, vec2 pNext){
    vec2 offset = rawPos - p[i];
    
    return pNext + offset;
    
}
void main(void) {
    float shaderTime = smoothstep(0.0,1.0,(time-end)*RATE);
    shaderTime = (end==0)?shaderTime:(1.0-shaderTime);

    float radius = mix(MIN_SIZE, MAX_SIZE, shaderTime);

    vec2 uv = gl_FragCoord.xy/screenSize.xy;
    
    int maxI = int(radius * arrSize + 1.);
    
    int closeI = closest(uv.x, uv.y, maxI);
    
    mat2 rotation = rotateFromIndex(closeI);
    
    vec2 absolute = rotation * getNewAbsoluteCoordinate(uv.xy , closeI, p[(closeI+1)%arrSize]) * vec2(1.0,screenSize.x/screenSize.y);
    // Time varying pixel color
    vec4 col = texture(imageData, absolute); 

    // Output to screen
    gl_FragColor = col;
}
